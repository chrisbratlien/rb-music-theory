h1. cb-music-theory

h2. Overview

Basic twelve-tone music theory including notes, note intervals, scales, chords

h3. Note

A Note has an Integer value indicating its place on the chromatic scale.  Compatible with
the <a href="http://www.harmony-central.com/MIDI/Doc/table2.html">MIDI note number chart</a>.

h3. NoteInterval

A NoteInterval is used to transform a Note into a new Note.

Note + NoteInterval => Note

<pre><code>
  irb(main):025:0> Note.new("C")
  => #<Note:0x2679f4c @value=60>
  irb(main):026:0> Note.new("C").name
  => "C"
  irb(main):027:0> Note.new("C").plus_interval(NoteInterval.new(12))
  => #<Note:0x2674524 @value=72>
  irb(main):028:0> Note.new("C").plus_interval(NoteInterval.octave)
  => #<Note:0x2675438 @value=72>
  irb(main):029:0> Note.new("C").plus_interval(NoteInterval.octave).name
  => "C"
  irb(main):030:0>
</code></pre>
Notice that NoteInterval.octave is the same as NoteInterval.new(12)

NoteIntervals can be added together

NoteInterval + NoteInterval => NoteInterval
<pre><code>
irb(main):046:0> NoteInterval.new(5).plus_interval(NoteInterval.new(7))
=> #<NoteInterval:0x267396c @value=12>
</code></pre>


h3. Scales and Chords

Both of these classes share a superclass RootNoteWithIntervals which gives
them
* a root Note
* an array of NoteIntervals

As shown above, the NoteIntervals applied to the root
Note will yield the actual Notes in the Scale or Chord.

h4. Major Scale

The major scale has been included as a class method.  Notice the array of
NoteIntervals passed includes NoteInterval.unison for the
root note (same as NoteInterval.new(0)).
<pre><code>
  class Scale < RootNoteWithIntervals

    def self.major_scale(root_note)
      Scale.new(root_note,
        [
          NoteInterval.unison,
          NoteInterval.maj2,
          NoteInterval.maj3,
          NoteInterval.per4,
          NoteInterval.per5,
          NoteInterval.maj6,
          NoteInterval.maj7
        ])
    end
  end
</pre></code>
 

<pre><code>
  irb(main):050:0> Scale.major_scale(Note.new("C"))
  => #<Scale:0x2675dc0 @intervals=[#<NoteInterval:0x2675690 @value=0>, 
   #<NoteInterval:0x267567c @value=2>, #<NoteInterval:0x2675668 @value=4>, #<NoteInterval:0x2675654 @value=5>,
   #<NoteInterval:0x2675640 @value=7>, #<NoteInterval:0x267562c @value=9>, #<NoteInterval:0x2675618 @value=11>],
   @root_note=#<Note:0x2675e38 @value=60>>
</code></pre> 
 
Often you'll just ask a Scale or Chord for its note_names.  But you have access to the notes and note_values too.

<pre><code>
class RootNoteWithIntervals

  def notes
    @intervals.map{|i| @root_note.plus_interval(i)}
  end

  def note_names
    self.notes.map{|n| n.name}
  end

  def note_values
    self.notes.map{|n| n.value}
  end

end

irb(main):053:0> Scale.major_scale(Note.new("C")).note_names
=> ["C", "D", "E", "F", "G", "A", "B"]

</code></pre>

The Note class also has an instance method major_scale for syntactic sugar

<pre><code>
irb(main):055:0> Note.new("C").major_scale.note_names
=> ["C", "D", "E", "F", "G", "A", "B"]
irb(main):056:0> Note.new("F#").major_scale.note_names
=> ["F#", "G#", "A#", "B", "C#", "D#", "F"]
</code></pre>

h4. Degrees

Asking a Scale for a Degree at a 1-based position.  Degrees higher than 7 wrap
around the scale to the next octave.  The 1st degree of the
C major scale is the note C.  The 8th degree is also C, but an octave higher.
Notice the value of 72.  The same applies for higher degrees commonly

<pre><code>
  irb(main):073:0> Note.new("C").major_scale.degree(1)
  => #<Note:0x2674e98 @value=60>
  irb(main):074:0> Note.new("C").major_scale.degree(1).name
  => "C"
  irb(main):075:0> Note.new("C").major_scale.degree(8)
  => #<Note:0x2674e84 @value=72>
  irb(main):076:0> Note.new("C").major_scale.degree(8).name
  => "C"
  irb(main):077:0> Note.new("C").major_scale.degree(9)
  => #<Note:0x2674de4 @value=74>
  irb(main):078:0> Note.new("C").major_scale.degree(9).name
  => "D"
  irb(main):079:0> Note.new("C").major_scale.degree(11)
  => #<Note:0x2674d1c @value=77>
  irb(main):080:0> Note.new("C").major_scale.degree(11).name
  => "F"
  irb(main):081:0> Note.new("C").major_scale.degree(13)
  => #<Note:0x2674c54 @value=81>
  irb(main):082:0> Note.new("C").major_scale.degree(13).name
  => "A"
</code></pre>

FIXME: I haven't fully thought through the how to model
scales with other than 7 notes, such as pentatonic scales.

h4. Chords

I found <a href="http://www.harmony-central.com/Guitar/chord-and-theory-chart.txt">several</a> <a href="http://jmdl.com/howard/music/quick_crd_ref.html">references</a> on the Internet which define
the NoteIntervals for common chords.

While Chord is its own class, I plan to create them as an instance method of a Note.


chord example
chord patterns as class methods
inverting a chord


